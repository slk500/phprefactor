#+SETUPFILE: export/setup/theme-darksun-local.setup

#+Title: PHPRefactor

* Refactorings
** Add PHPDoc
     Smell: An array with elements of generic type or method which can throw Exception
#+BEGIN_SRC php
public function printUsersNames(array $users): void
{
    foreach ($users as $user) {
        echo $user->getName();
    }
}
#+END_SRC
*** Refactor the code
      Add PHPDoc - the Object[] notation in addition to an array type-hint to explain what kind of object is expected
#+BEGIN_SRC php
/**
 ,* @param User[] $users
 ,*/
public function printUsersNames(array $users): void
{
    foreach ($users as $user) {
        echo $user->getName();
    }
}
#+END_SRC
** Add Type-Hint
     Smell: A method with no type defined parameters or return type declaration
#+BEGIN_SRC php
public function setNumber($number)
{
    $this->number = $number;
}
#+END_SRC
*** Refactor the code
#+BEGIN_SRC php
public function setNumber(int $number): void
{
    $this->number = $number;
}
#+END_SRC
*** Helper 
    [[https://github.com/dunglas/phpdoc-to-typehint][phpdoc-to-typehint]] adds automatically scalar type hints and return types to all functions and methods using existing PHPDoc annotations 
*** Further Reading 
    https://www.thecodingmachine.com/type-hint-all-the-things/
** Consolidate Conditional Expression
     Smell: Sequence of conditionals with the same result
#+BEGIN_SRC php
class Sale
{
    public function calculateShipping(Customer $customer)
    {
        if ($customer->isEmployee) return 0;
        if ($customer->isGoldCustomer) return 0;
        if ($customer->isHasACoupon) return 0;
        
        if($isUsa) return 10;
        if($isEurope) return 20;
    }
}
#+END_SRC
*** Write a test that pass
*** Refactor the code 
      Combine them into a single conditional expression and extract it.
#+BEGIN_SRC php
class Sale
{
    public function calculateShipping(Customer $customer): int
    {
       if ($this->isFreeShipping()){
           return 0;
       }

        if($isUsa) {
            return 10;
        }

        if($isEurope) {
            return 20;
        }
    }

    private function isFreeShipping(): bool
    {
        return ($customer->isEmployee || $customer->isGoldCustomer || $customer->isHasACoupon);
    }
}
 #+END_SRC
*** Pass a test
** Consolidate Duplicate Conditional Fragments
     Smell: The same fragment of code is in all branches of a conditional expression.
#+BEGIN_SRC php
final class Sale
{
    public function calculateTotal(int $price)
    {
        if ($this->isSpecialDeal()) {
            $total = $price * 0.95;
            $this->setTotal($total);
        }
        else {
            $total = $price * 0.98;
            $this->setTotal($total);
        }
    }
}
#+END_SRC
*** Write a test that pass
*** Refactor the code 
      Move it outside of the expression.
#+BEGIN_SRC php
class Sale
{
    public function calculateShipping(Customer $customer): int
    {
       if ($this->isFreeShipping()){
           return 0;
       }

        if($isUsa) {
            return 10;
        }

        if($isEurope) {
            return 20;
        }
    }

    private function isFreeShipping(): bool
    {
        return ($customer->isEmployee || $customer->isGoldCustomer || $customer->isHasACoupon);
    }
}
 #+END_SRC
*** Pass a test
** Decompose Conditional
     Smell: Complicated conditional (if-else) statement.
#+BEGIN_SRC php
class Sale
{
    public $expired_at;
    public $amount;

    public function getAmount()
    {
        if(null !== $this->expired_at && $this->expired_at < time())
        {
            $interest = 10;
            $this->amount = $this->amount + ($this->amount / 100 * $interest);
        }
        else
        {
            $discount = 10;
            $this->amount = $this->amount - ($this->amount / 100 * $discount);
        }
        return $this->amount;
    }
}
#+END_SRC
*** Write a test that pass
#+BEGIN_SRC php
class SaleTest extends TestCase
{
    public function testAmount()
    {
        $sale = new Sale();
        $sale->amount = 10;
        $sale->expired_at = strtotime('-10 days');
        $this->assertEquals(10 + (10 / 100 * 10), $sale->getAmount());
        $sale = new Sale();

        $sale->amount = 10;
        $sale->expired_at = strtotime('+10 days');
        $this->assertEquals(10 - (10 / 100 * 10), $sale->getAmount());
    }
}
#+END_SRC
*** Refactor the code
Extract conditional code in a private method. We name the method isExpired() because our conditional chunk of code checks if the sale is expired. We create the private method isExpired() and, with the technique of extract method, we move chunks of code into the new method. The next step is to move each branch of the condition in a private method. We do the same as we did before for each branch. So we create the private method getAmountWithInterest() for the first branch and the method getAmountWithDiscount() for the second branch.
#+BEGIN_SRC php
class Sale
{
    public $expired_at;
    public $amount;

    public function getAmount()
    {
        if ($this->isExpired()) {
            return $this->getAmountWithInterest();
        } else {
            return $this->getAmountWithDiscount();
        }
    }

    private function isExpired()
    {
        return !is_null($this->expired_at) && $this->expired_at < time();
    }

    private function getAmountWithInterest()
    {
        $interest = 10;
        return $this->amount + ($this->amount / 100 * $interest);
    }

    private function getAmountWithDiscount()
    {
        $discount = 10;
        return $this->amount - ($this->amount / 100 * $discount);
    }
}
#+END_SRC
*** Pass a test
** Encapsulate Field
     Smell: A public field
#+BEGIN_SRC php
final class User
{
    /**
     * @var string
     */
    public $name;
}
#+END_SRC
*** Write a test that pass
*** Refactor the code
      Make it private and provide accessors.
#+BEGIN_SRC php
final class User
{
    /**
     * @var string
     */
    private $name;

    public function getName(): string
    {
        return $this->name;
    }

    public function setName(string $name): void
    {
        $this->name = $name;
    }
}
#+END_SRC
*** Run a test
** Extract Class
     SmellL Large Class
#+BEGIN_SRC php
final class User
{
    private $name;
    private $surname;

    private $city;
    private $zipCode;
    private $street;
    private $state;
}
#+END_SRC
*** Write a test that pass
*** Refactor the code 
      Create a new class and move the relevant fields and methods from the old class into the new class.
#+BEGIN_SRC php
final class User
{
    private $name;
    private $surname;

    private $address;
}

final class Address
{
    private $city;
    private $zipCode;
    private $street;
    private $state;
}
#+END_SRC
*** Pass a test
** Extract Method
     Smell: Code fragment that can be grouped together
#+BEGIN_SRC php
public function printInvoice(Invoice $invoice): void
{
    echo 'Invoice';
    echo '<br>';
    echo $invoice->getNumber();
   
    echo 'phpRefactor: ';
    echo '<br>';
    echo $invoice->getDate();
}
#+END_SRC
*** Write a test that pass
*** Refactor the code 
      Turn the fragment into a method whose name explains the purpose of the method
#+BEGIN_SRC php
public function printInvoice(Invoice $invoice): void
{
    printInvoiceHeader($invoice);
    printInvoiceFooter($invoice);
}

function printInvoiceHeader(Invoice $invoice): void
{
    echo 'Invoice';
    echo '<br>';
    echo $invoice->getNumber();
}

function printInvoiceFooter(Invoice $invoice): void
{
    echo 'phpRefactor: ';
    echo '<br>';
    echo $invoice->getDate();
}
 #+END_SRC
*** Run a test
** Extract Variable
   Smell: Complicated expression
#+BEGIN_SRC php
if(($stock->checkStatus($order->getItem) > $order->getQuantity()) 
    && ($order->getTotal() > 99) 
    && ($order->getCustomer()->getBillingAddress() === $order->getShippingAddress()));
#+END_SRC
*** Write a test that pass
*** Refactor the code
    Put the result of the expression, or parts of the expression, in a temporary variable with a name that explains the purpose
#+BEGIN_SRC php
$freeShipping = $order->getTotal() > 99;
$stockAvailable = $stock->checkStatus($order->getItem) > $order->getQuantity();
$addressMatches = $order->getCustomer()->getBillingAddress() === $order->getShippingAddress();
if($stockAvailable && $freeShipping && $addressMatches);
#+END_SRC
*** Pass a test
    Info: In the books, this refactoring is called "Introduce Explaining Variable", but most tools and people now use the (better) name "extract variable"
** Inline Class
   Smell: A class isn't doing very much
#+BEGIN_SRC php
final class User
{
    private $name;
    private $surname;

    private $telephoneNumber;
}

final class TelephoneNumber
{
    private $number;
}
#+END_SRC
** Inline Method
   Smell: A method's body is just as clear as its name
#+BEGIN_SRC php
public function calculateAreaOfCircle(float $radius): float
{
    return getValueOfPI() * $radius * $radius;
}

public function getValueOfPI(): float
{
    return pi();
}
#+END_SRC
*** Write a test that pass
*** Refactor the code 
    Put the method's body into the body of its callers and remove the method.
#+BEGIN_SRC php
public function calculateAreaOfCircle(float $radius): float
{
    return pi() * $radius * $radius;
}
 #+END_SRC
*** Pass a test
** Introduce Parameter Object
   Smell: Long Parameter List and parameters that naturally go together
#+BEGIN_SRC php
final class Account
{
    public function findAllTransactions(DateTime $start, DateTime $end)
    {
        ...
    }
}
#+END_SRC
*** Write a test that pass
*** Refactor the code 
    Replace them with an object.
#+BEGIN_SRC php#+END_SRC
*** Pass a test

** Move Method
   Smell: Method accessing fields and methods in different class
   #+BEGIN_SRC php
final class Customer
{
    function printInvoice(Order $order)
    {
        echo "Invoice {$order->getId()}";
        echo "Date: {$order->getDate()}";
        echo "Customer: {$this->getName()}";

        $address = $order->getAddress();
        echo "City: {$address->getCity()}";
        echo "Address: {$address->getStreet()}";

        foreach ($order->getItems() as $item){

            echo "Name: {$item->getName()}";
            echo "Price: {$item->getPrice()}";
        }
    }
}   
   #+END_SRC
*** Write a test that pass
*** Refactor the code 
    Move all its features into another class and delete it.
#+BEGIN_SRC php
final class Order
{
    function printInvoice()
    {
        echo "Invoice {$this->getId()}";
        echo "Date: {$this->getDate()}";
        echo "Customer: {$this->getCustomer()->getName()}";

        $address = $this->getAddress();
        echo "City: {$address->getCity()}";
        echo "Address: {$address->getStreet()}";

        foreach ($this->getItems() as $item){

            echo "Name: {$item->getName()}";
            echo "Price: {$item->getPrice()}";
        }
    }
}
 #+END_SRC
*** Pass a test
** Optimize Imports
   Smell: Imports unused or not in alphabetically order. Multiple use statement
#+BEGIN_SRC php
use SomeClass\Worker;
use SomeClass\Foo;
use SomeClass\UnusedClass;
#+END_SRC
*** Write a test that pass
*** Refactor the code 
    Remove unused imports. Sort imports alphabetically (ascending order). Splits multiple use statement imports into single use statement imports
#+BEGIN_SRC php
use SomeClass\{Foo, Worker};
 #+END_SRC
*** Pass a test
** Parameterize Method
   Smell: Several methods do similar things but with different values contained in the method body.
#+BEGIN_SRC php
final class Employee
{
    /**
     * @var float
     */
    private $salary;

    public function setSalary(float $salary)
    {
        $this->salary = $salary;
    }

    public function getSalary(): float
    {
        return $this->salary;
    }

    public function fivePercentRaise()
    {
        $this->salary += $this->salary* (5 / 100);
    }

    public function tenPercentRaise()
    {
        $this->salary += $this->salary* (10 / 100) ;
    }
}
#+END_SRC
*** TODO Write a test that pass
*** Refactor the code 
Create one method that uses a parameter for the different values.
#+BEGIN_SRC php
final class Employee
{
    /**
     * @var float
     */
    private $salary;

    public function setSalary(float $salary)
    {
        $this->salary = $salary;
    }

    public function getSalary(): float
    {
        return $this->salary;
    }

    public function raise(float $percent)
    {
        $this->salary += $this->salary * ($percent / 100);
    }
}
 #+END_SRC
*** Pass a test
** Preserve Whole Object
   Smell: More than one value from an object are passing as parameters in a method call
#+BEGIN_SRC php
class September
{
    /**
     * @var float
     */
    private $highestTemp;

    /**
     * @var float
     */
    private $lowestTemp;

    public function __construct(float $highestTemp, float $lowestTemp)
    {
        $this->highestTemp = $highestTemp;
        $this->lowestTemp = $lowestTemp;
    }

    public function getHighestTemp(): float
    {
        return $this->highestTemp;
    }

    public function getLowestTemp(): float
    {
        return $this->lowestTemp;
    }
}

class Calculator
{
    public function calculateAverageTemperature(float $highestTemp, float $lowestTemp)
    {
        return ($highestTemp + $lowestTemp) / 2;
    }
}

$september = new September(15,5);
$calculator = new Calculator();

$averageTemperature = $calculator->calculateAverageTemperature(
            $september->getHighestTemp(),
            $september->getLowestTemp()
        );
#+END_SRC
*** Write a test that pass
#+BEGIN_SRC php
public function testCalculateAverageTemperature()
{
        $september = new September(15,5);
        $calculator = new Calculator();

        $averageTemperature = $calculator->calculateAverageTemperature(
            $september->getHighestTemp(),
            $september->getLowestTemp());

        $this->assertEquals(10, $averageTemperature);
}
#+END_SRC
*** Refactor the code
    Add object as a new parameter. Set it default value to null, that will help to manage the transitions towards the final version of the method.
#+BEGIN_SRC php
class Calculator
{
    public function calculateAverageTemperature(float $highestTemp, float $lowestTemp, September $september = null)
    {
        return ($highestTemp + $lowestTemp) / 2;
    }
}
#+END_SRC
*** Pass a test
*** Refactor the code
    Replace values with values coming from the whole object
#+BEGIN_SRC php
class Calculator
{
    public function calculateAverageTemperature(float $highestTemp, float $lowestTemp, September $september = null)
    {
        return ($september->getHighestTemp() + $september->getLowestTemp()) / 2;
    }
}
#+END_SRC
*** Pass a test
*** Refactor the code
    Remove useless parameters and default null value of $september object
#+BEGIN_SRC php
class Calculator
{
    public function calculateAverageTemperature(September $september)
    {
        return ($september->getHighestTemp() + $september->getLowestTemp()) / 2;
    }
}
#+END_SRC
*** Pass a test
** Pull Up Method
   Smell: Subclasses have the same method.
#+BEGIN_SRC php
class Employee
{
    /**
     * @var string
     */
    protected $name;
    
    public function __construct(string $name)
    {
        $this->name = $name;
    }
}

final class Salesman extends Employee
{
    public function getName()
    {
        return $this->name;
    }
}

final class Engineer extends Employee
{
    public function getName()
    {
        return $this->name;
    }
}
#+END_SRC
*** Write a test that pass
*** Refactor the code 
    Move the methods to the super class.
#+BEGIN_SRC php
class Employee
{
    /**
     * @var string
     */
    protected $name;

    public function __construct(string $name)
    {
        $this->name = $name;
    }

    public function getName()
    {
        return $this->name;
    }
}

final class Salesman extends Employee {}

final class Engineer extends Employee {}
 #+END_SRC
*** Pass a test
** Remove Assignments to Parameters
   Smell: Reassign to a parameter
   #+BEGIN_SRC php
public function discount(int $priceTotal): int
{
    if ($priceTotal > 100) {
        $priceTotal = $priceTotal - 10;
    }
    
    return $priceTotal;
}  
   #+END_SRC
*** Write a test that pass
*** Refactor the code 
    Use a temporary variable instead
#+BEGIN_SRC php
public function discount(int $priceTotal): int
{
    $result = $priceTotal;

    if ($priceTotal > 100) {
        $result = $result - 10;
    }

    return $result;
}
#+END_SRC
*** Pass a test
*** Info
    The best practice is that if you pass parameters into a method then they should always represent what were passed in and never be reassigned to mean something else. Btw. in Java you can prevent variable’s reassignment by keyword 'final' before a parameter https://stackoverflow.com/questions/500508/why-should-i-use-the-keyword-final-on-a-method-parameter-in-java
** Remove PHPDoc
   Smell: PHPDoc is duplicating type-hint information
   Damage: Adds information which not provides additional value
   #+BEGIN_SRC php
/**
 * @param int $number
 * @return void
 */
public function setNumber(int $number): void
{
    $this->number = $number;
}  
   #+END_SRC
*** Write a test that pass
*** Refactor the code 
Remove PHPDoc if it's not provides additional value
#+BEGIN_SRC php

#+END_SRC
*** Pass a test
** Rename Method
   Smell: The name of a method does not reveal it's purpose1
#+BEGIN_SRC php
public function getInvcdtlmt()
#+END_SRC

*** Write a test that pass
*** Refactor the code 
    Change the name of the method
#+BEGIN_SRC php
public function getInvoiceableCreditLimit()
#+END_SRC
*** Pass a test
** Replace Global with Dependency Injection
   Smell: Variable with 'global' keyword
#+BEGIN_SRC php
final class Item
{
    public function fetch()
    {
        global $db;
        return $db->query(...);
    }
}
#+END_SRC

*** Write a test that pass
*** Refactor the code 
    Move global variable in class to the constructor
#+BEGIN_SRC php
final class Item
{
    /**
     * @var Database
     */
    private $db;

    public function __construct(Database $db)
    {
        $this->db = $db;
    }

    public function fetch()
    {
        return $db->query(...);
    }
}
#+END_SRC
*** Pass a test
** Replace Magic Number With Symbolic Constant
   Smell: Number with a particular meaning
    #+NAME: replace_magic_number_with_symbolic_constant
     #+BEGIN_SRC php
final class Circle
{
    /**
     ,* @var float
     ,*/
    private $radius;
    
    public function __construct(float $radius)
    {
		$this->radius = $radius;
    }
    
    public function getCircumference(): float
    {
		return $this->radius * 2 * 3.1416;
    }
}
     #+END_SRC
*** Write a test that pass
    #+NAME: init_block_test
    #+BEGIN_SRC phpunit :noweb yes :noweb strip-export :exports both
<<replace_magic_number_with_symbolic_constant>>
use PHPUnit\Framework\TestCase;

class CircleTest extends TestCase
{   
    public function testGetCircumference()
    {
        $circle = new Circle(2);
        $this->assertEquals(12.5664, $circle->getCircumference());
    }
}
    #+END_SRC

    #+RESULTS:
    : PHPUnit 7.5.2 by Sebastian Bergmann and contributors.
    : 
    : .                                                                   1 / 1 (100%)
    : 
    : Time: 151 ms, Memory: 10.00MB
    : 
    : OK (1 test, 1 assertion)

*** Refactor the code 
    Create a constant, name it after the meaning, and replace the number with it
    #+BEGIN_SRC php
final class Circle
{
    /**
     ,* @var float
     ,*/
    private const PI = 3.1416;

    /**
     ,* @var float
     ,*/
    private $radius;

    public function __construct(float $radius)
    {
		$this->radius = $radius;
    }

    public function getCircumference(): float
    {
		return $this->radius * 2 * self::PI;
    }
}
    #+END_SRC
*** Run a test 
    #+RESULTS: init_block_test 
*** Helper:  
    [[https://github.com/povils/phpmnd][PHP Magic Number Detector]] is a tool to detect magic numbers in your PHP code
** Replace Parameter with Method
   Smell: A method runs different code depending on the values of parameters
#+BEGIN_SRC php
final class EmailNotification
{
    public function send(string $to, string $body, string $from = null)
    {
        if($from){
            $this->mailer->send($to, $body, $from);
        }else{
            $this->mailer->send($to, $body, $this->defaultSender);
        }
    }
}
#+END_SRC
*** Write a test that pass
*** Refactor the code 
    Create a separate method for each value of the parameter
#+BEGIN_SRC php
final class EmailNotification
{
    public function send(string $to, string $body, string $from)
    {
        $this->mailer->send($to, $body, $from);
    }
    
    public function sendFromDefaultSender(string $to, string $body)
    {
        $this->mailer->send($to, $body, $this->defaultSender);
    }
}
#+END_SRC
*** Pass a test
** Replace Temp with Query
   Smell: Using a temporary variable to hold the result of an expression.
   Damage: Temporary variable increase the temptation to write longer methods. Temporaries aren’t necessarily bad, but sometimes they attract new code.
#+BEGIN_SRC php
public function getTotalPrice(): int
{
    $basePrice = $this->quantity * $this->itemPrice;

    if ($basePrice > self::DISCOUNT_POINT) {
        return $basePrice * self::DISCOUNT;
    }
    return $basePrice;
}
#+END_SRC
*** Write a test that pass
*** Refactor the code 
    Extract the expression into a method. Replace all references to the temp with the expression. The new method can then be used in other methods.
#+BEGIN_SRC php
public function getTotalPrice(): int
{
    if ($this->getBasePrice() > self::DISCOUNT_POINT) {
        return $this->getBasePrice() * self::DISCOUNT;
    }
    return $this->getBasePrice();
}

public function getBasePrice(): int
{
    $this->quantity * $this->itemPrice;
}
#+END_SRC
*** Pass a test
*** Info 
    Now, but wait, you might say. Isn't this more inefficient? Because if we created the temp the old way, we'd only have to execute the expression once, but if we turn it into a method, we might be calling it many different times. And yes, you're absolutely right, but remember, the pure efficiency of the code is not our first goal in refactoring. Clarity is. The likelihood is that a typical expression you would deal with in this sort of refactoring is going to be so undemanding, it wouldn't be noticeable at all, even having to call it several more times. But if it is an intensive operation, an intensive expression, well you should really be working on that later, after you've refactored using profilers. And other tools to make sure you're not doing pointless, premature optimization. And the real benefit is that by creating this as its own method, we will also have use of it anywhere else in the class, which wasn't the case before. As the original temp was scoped to the original method. So, we won't be tempted to add more code to the original method just to have access to that temp.
** Replacing Type Code with Subclasses
   Smell: Immutable type code affecting the class behavior.
#+BEGIN_SRC php
final class Account
{
    /**
     * @var int
     */
    private $accountType;

    /**
     * @var float
     */
    private $balance;

    /**
     * @var int
     */
    public const CHECKING = 0;

    /**
     * @var int
     */
    public const SAVINGS = 1;

    /**
     * @var int
     */
    public const INVESTMENT = 2;

    public function __construct(int $accountType)
    {
        $this->accountType = $accountType;
    }

    public function getAccountType(): int
    {
        return $this->accountType;
    }

    public function getBalance(): float
    {
        return $this->balance;
    }

    public function withdraw(float $amount): void
    {
        switch ($this->accountType){
            case self::CHECKING:
                $this->balance -= $amount;
                break;
            case self::SAVINGS:
                $this->balance -= $amount + 100;
                break;
            case self::INVESTMENT:
                $this->balance -= $amount + 300;
                break;
            default:
                throw new RuntimeException('Unknown Account Type');
        }
    }
}
#+END_SRC
*** Write a test that pass
*** Refactor the code 
    Replace the type code with subclasses.
#+BEGIN_SRC php
abstract class Account
{
    /**
     * @var float
     */
    private $balance;

    public function getBalance(): float
    {
        return $this->balance;
    }
    
    abstract public function withdraw(float $amount): void
}

final class AccountChecking extends Account
{
    public function withdraw(float $amount): void
    {
        $this->balance -= $amount;
    }
}

final class AccountSavings extends Account
{
    public function withdraw(float $amount): void
    {
        $this->balance -= $amount + 100;
    }
}

final class AccountInvestment extends Account
{
    public function withdraw(float $amount): void
    {
        $this->balance -= $amount + 300;
    }
}
#+END_SRC
*** Pass a test
** Separate Query from Modifier
   Smell: A method that returns a value but also changes the state of an object.
#+BEGIN_SRC php
final class Account
{
    /**
     * @var float
     */
    private $balance;
    
    public function withdrawAndGetBalance(float $amount): float
    {
        $this->balance -= $amount;
        return $this->balance;
    }
}
#+END_SRC
*** Write a test that pass
*** Refactor the code
    Create two methods, one for the query and one for the modification.
#+BEGIN_SRC php
final class Account
{
    /**
     * @var float
     */
    private $balance;

    public function getBalance(): float
    {
        return $this->balance;
    }

    public function withdraw(float $amount): void
    {
        $this->balance -= $amount;
    }
}
#+END_SRC
*** Pass a test
** Split Temporary Variable
   Smell: Temporary variable is assigned to more than once (overwrite), but is not a loop variable nor a collecting temporary variable.
#+BEGIN_SRC php
$temp = $item.getPrice() * item.getQuantity();
echo "Total: $temp";
$temp = order.getTotal() - order.getDiscount();
echo "Price after discount: $temp;"
#+END_SRC
*** Write a test that pass
*** Refactor the code
    Make a separate temporary variable for each assignment.
#+BEGIN_SRC php
$totalPrice = $item.getPrice() * item.getQuantity();
echo "Total: $totalPrice";
$totalDiscountPrice = order.getTotal() - order.getDiscount();
echo "Price after discount: $totalDiscountPrice";
#+END_SRC
*** Pass a test
* Books
  
| author                                | title                                                                                                                | topic       | info        | year |                                                                                                                                                                                                              |   |
|---------------------------------------+----------------------------------------------------------------------------------------------------------------------+-------------+-------------+------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+---|
| Andrew Hunt, David Thomas             | The Pragmatic Programmer: From Journeyman to Master                                                                  | overall     | skip        | 1999 | a lot of tips & tricks but too old                                                                                                                                                                           |   |
|                                       | Antipatterns. Refactoring Software, Archtectures and Projects in Crisis                                              |             |             | 1998 |                                                                                                                                                                                                              |   |
|                                       | Refactoring in Large Software Projects                                                                               |             |             | 2006 |                                                                                                                                                                                                              |   |
|                                       | Antipatterns: Identification, Refactoring, and Management                                                            |             |             | 2005 |                                                                                                                                                                                                              |   |
|                                       | Fifty Quick Ideas To Improve Your Tests                                                                              | tests       |             |      |                                                                                                                                                                                                              |   |
|                                       | Growing Object-Oriented Software, Guided by Tests                                                                    |             |             |      |                                                                                                                                                                                                              |   |
|                                       | Working Effectively with Unit Tests                                                                                  |             |             |      |                                                                                                                                                                                                              |   |
|                                       | Scalable Internet Architectures                                                                                      |             |             |      |                                                                                                                                                                                                              |   |
|                                       | SQL for Smarties: Advanced SQL Programming                                                                           | database    |             | 2005 |                                                                                                                                                                                                              |   |
|                                       | Mastering the SPL Library                                                                                            |             |             |      |                                                                                                                                                                                                              |   |
|                                       | Anthology  The Thoughtworks Anthology - Essays on Software Technology and Innovation                                 |             |             | 2008 |                                                                                                                                                                                                              |   |
|                                       | Anthology  The ThoughtWorks Anthology 2 - More Essays on Software Technology and Innovation                          |             |             | 2012 |                                                                                                                                                                                                              |   |
| Beck, Kent                            | Extreme Programming Explained: Embrace Change                                                                        | overall     | can be read | 1999 |                                                                                                                                                                                                              |   |
| Bernstein, David Scott                | Beyond Legacy Code                                                                                                   |             |             | 2015 | Want to read                                                                                                                                                                                                 |   |
| Bhargava, Aditya                      | Grokking Algorithms: An illustrated guide for programmers and other curious people                                   |             | must read   | 2017 | Fully illustrated, friendly, easy to read guide, worth to read. When you will stumble upon a problem, you will know how to recognize it and chose the right Algorithm                                        |   |
| Bloch, Joshua                         | Effective Java                                                                                                       |             |             | 2018 |                                                                                                                                                                                                              |   |
| Buenosvinos, Carlos                   | Domain-Driven Design in PHP                                                                                          |             |             | 2016 |                                                                                                                                                                                                              |   |
| Bugayenko, Yegor                      | Elegant Objects                                                                                                      |             |             | 2016 | Want to read                                                                                                                                                                                                 |   |
| Feathers, Michael                     | Working Effectively with Legacy Code                                                                                 |             |             | 2005 |                                                                                                                                                                                                              |   |
| Fowler, Martin                        | Refactoring: Improving the Design of Existing Code                                                                   | refactoring | must have   | 1999 |                                                                                                                                                                                                              |   |
| Fowler, Martin                        | Patterns of Enterprise Application Architecture                                                                      |             |             | 2012 |                                                                                                                                                                                                              |   |
| Francesco Trucchia, Jacopo Romei      | Pro PHP Refactoring                                                                                                  |             |             | 2010 | Old, without PHP 7 but still the best PHP book about refactoring. Great examples. Worth to have.                                                                                                             |   |
| Ganesh, Samarthyam; Tushar, Sharma    | Refactoring for Software Design Smells: Managing Technical Debt                                                      |             |             | 2015 | Catalog of smells. Focus on smell point of view. Also they introduce smell classification scheme, naming scheme for design smells which helps to increase awerness of smells. So definetly must read. (Java) |   |
| Halladay, Steve                       | Principle-Based Refactoring: Learning Software Design Principles by Applying Refactoring Rules                       |             |             | 2012 | Want to read                                                                                                                                                                                                 |   |
| Jones, Paul M.                        | Modernizing Legacy Apps In PHP                                                                                       |             |             | 2014 |                                                                                                                                                                                                              |   |
| Junade, Ali                           | Mastering PHP Design Patterns                                                                                        |             |             | 2016 | Little bit inmature, poorly written. Having a lot of tips and information about broad variaty of things which is a good place on website but not in the book. Code examples could be much better.            |   |
| Karwin, Bill                          | SQL Antipatterns - Avoiding The Pitfalls of Database Programming                                                     | database    |             | 2010 |                                                                                                                                                                                                              |   |
| Kerievsky, Joshua                     | Refactoring to Patterns                                                                                              |             |             | 2004 |                                                                                                                                                                                                              |   |
| Martin, Robert C.                     | Agile Software Development: Principles, Patterns, and Practices                                                      |             |             | 2002 |                                                                                                                                                                                                              |   |
| Martin, Robert C.                     | Clean Code: A Handbook of Agile Software Craftsmanship                                                               |             |             | 2009 |                                                                                                                                                                                                              |   |
| Rahman, Mizanur                       | PHP 7 Data Structures and Algorithms                                                                                 | refactoring | must have   | 2017 |                                                                                                                                                                                                              |   |
| Scott J Ambler and Pramod J. Sadalage | Refactoring Databases - Evolutionary Database Design                                                                 | refactoring | must read   | 2006 | It's catalog of refactorings for database                                                                                                                                                                    |   |
| Stephane Faroult, Pascal L'Hermite    | Refactoring SQL Application                                                                                          | database    |             | 2008 |                                                                                                                                                                                                              |   |
| Tornhill, Adam                        | Your Code as a Crime Scene - Use Forensic Techniques to Arrest Defects, Bottlenecks, and Bad Design in Your Programs |             |             | 2015 |                                                                                                                                                                                                              |   |
| West, David                           | Object Thinking                                                                                                      |             |             | 2004 |                                                                                                                                                                                                              |   |
| Zandstra, Matt                        | PHP Objects, Patterns, and Practice                                                                                  |             | can be read | 2008 | Pretty old. But written with precise language and with great examples                                                                                                                                        |   |

* Tools
* Tutorials  
| [[https://www.pluralsight.com/courses/automated-tests-phpunit][Automated Tests with PHPUnit]]                     | Anna Filina              | testing - PHPUnit     |
| [[https://industriallogic.com/xp/refactoring/catalog.html][Catalog of Refactoring to Patterns]]               | Joshua Kerievsky         | patterns              |
| [[https://refactoring.com/catalog/][Catalog of Refactorings]]                          | Martin Fowler            | refactoring           |
| [[https://youtu.be/bkjIEywt45Y][Clean Application Development]]                    | Adam Culp                | clean application     |
| [[https://github.com/jupeter/clean-code-php][Clean Code PHP]]                                   | Piotr Plenik             | clean code            |
| [[https://code.tutsplus.com/courses/detecting-code-smells][Detecting Code Smells]]                            | Patkós Csaba             | refactoring           |
| [[https://youtu.be/WW2qPKukoZY][Doctrine Best Practices]]                          | Marco Pivetta (Ocramius) | doctrine              |
| [[https://www.pluralsight.com/courses/encapsulation-solid][Encapsulation and SOLID]]                          | Mark Seemann             | SOLID                 |
| [[https://youtu.be/7LoShYRnljU][Extremely Defensive PHP Programming]]              | Marco Pivetta (Ocramius) | defensive programming |
| [[https://youtu.be/Rdc3r2BJzWA][How to Refactor Like a Boss 1]]                    | Michael Cheng            | refactoring           |
| [[https://youtu.be/2iXayIx4WyQ][How to Refactor Like a Boss 2]]                    | Michael Cheng            | refactoring           |
| [[https://youtu.be/JCqbdVrIW30][HTTP Smoke Testing]]                               | Peter Heinz              | testing - smoke test  |
| [[https://www.udemy.com/introduction-to-testing-with-phpunit/][Introduction to Testing with PHPUnit]]             | Trevor Sawler            | testing - PHPUnit     |
| [[http://blog.adrianbolboaca.ro/2014/04/legacy-coderetreat/#sessions][Legacy Coderetreat (Java)]]                        | Adrian Bolboaca          | refactoring           |
| [[https://github.com/exakat/php-static-analysis-tools][List of Static Analysis Tools]]                    |                          | analysis              |
| [[https://www.lynda.com/PHP-tutorials/PHP-Testing-Legacy-Applications/669546-2.html][PHP: Testing Legacy Applications]]                 | Chris Hartjes            | testing - PHPUnit     |
| [[https://knpuniversity.com/screencast/phpunit][PHPUnit: Testing with a Bite]]                     | Ryan Weaver              | testing - PHPUnit     |
| [[https://www.lynda.com/Developer-Programming-Foundations-tutorials/Foundations-Programming-Refactoring-Code/122457-2.html][Programming Foundations: Refactoring Code]]        | Simon Allardice          | refactoring           |
| [[https://www.lynda.com/Software-Development-tutorials/Programming-Foundations-Test-Driven-Development/124398-2.html][Programming Foundations: Test-Driven Development]] | Simon Allardice          | testing - TDD         |
| [[https://youtu.be/0DYIJdX6kB4][Refactoring 101]]                                  | Adam Culp                | refactoring           |
| [[https://code.tutsplus.com/series/refactoring-legacy-code--cms-633][Refactoring Legacy Code]]                          | Patkós Csaba             | refactoring           |
| [[https://youtu.be/7v9ehGsPm1s][Refactoring Legacy Code]]                          | Adam Culp                | refactoring           |
| [[https://adamwathan.me/refactoring-to-collections/][Refactoring to Collections]]                       | Adam Wathan              | collections           |
| [[https://youtu.be/Fca-Ng0bzuk][Solving the N+1 Problem]]                          | Paul M. Jones            | database              |
| [[https://youtu.be/65NrzJ_5j58][Steps Toward Modernizing a Legacy Codebase]]       | Paul M. Jones            | refactoring           |
| [[https://code.tutsplus.com/courses/techniques-for-refactoring-code][Techniques for Refactoring Code]]                  | Patkós Csaba             | refactoring           |
* Practices
** Don't use 'else if'
   Else if is not compatible with the colon syntax for if|elseif blocks. For this reason, use elseif for conditionals
#+BEGIN_SRC php
<?php if ($user) { ?>
    <span>OK. Your registration is successful</span>
<?php } else { ?>
    <span>Something went wrong! Please try again later! </span>
<?php } ?>
#+END_SRC

#+BEGIN_SRC php
 if ($user) : ?>
    <div>OK. Your registration is successful</div>
<?php else : ?>
    <div>Something went wr+ong! Please try again later!</div>
<?php endif ?>
#+END_SRC

Most of the time the alternative (endif) syntax is used in view scripts. It's often hard to see/notice the end of an if statement since a curly brace only takes up one character, when you're at the bottom of a file, it's hard to tell if it's the end of an if or a foreach. For example:

#+BEGIN_SRC php
<?php if ($condition): ?>

    <div>a huge block of html</div>

<?php endif; ?>
#+END_SRC


https://www.mediawiki.org/wiki/Manual:Coding_conventions/PHP
And the latter has poorer performance.
#+BEGIN_SRC php
// This:
if ( $foo == 'bar' ) {
	echo 'Hello world';
} else if ( $foo == 'Bar' ) {
	echo 'Hello world';
} else if ( $baz == $foo ) {
	echo 'Hello baz';
} else {
	echo 'Eh?';
}

// Is actually equivalent to:
if ( $foo == 'bar' ) {
	echo 'Hello world';
} else {
	if ( $foo == 'Bar' ) {
		echo 'Hello world';
	} else {
		if ( $baz == $foo ) {
			echo 'Hello baz';
		} else {
			echo 'Eh?';
		}
	}
}
#+END_SRC
** Don't use 'clone'  
https://www.facebook.com/edyta.maciek
example with Doctrine
** Boolean conversion
#+BEGIN_SRC php
declare(stric_types=1);

$var  = '0';
if ( !$var ) {
   echo 'negation';
}
#+END_SRC

#+RESULTS:
: negation
* Wikipedia Refactor

